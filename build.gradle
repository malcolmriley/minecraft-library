plugins {
	id 'java-library'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'net.neoforged.gradle.userdev' version '7.0.57'
}

version = mod_version
group = mod_group_id

repositories {
	mavenLocal()
}

base {
	archivesName = "${mod_jar}-${mod_version}-${mod_loader}-${minecraft_version}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

runs {
	configureEach {
		systemProperty 'forge.logging.markers', 'REGISTRIES'
		systemProperty 'forge.logging.console.level', 'debug'

		modSource project.sourceSets.main
	}

	client {
		systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
	}

	server {
		systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
		programArgument '--nogui'
	}
	
	gameTestServer {
		systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
	}

	data {
		programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
	}
}

sourceSets.main.resources {
	srcDir 'src/generated/resources'
	exclude '.cache'
	exclude '*.DS_Store*'
}

sourceSets.main.java {
	// TODO: Determine alternative, as in NeoForge this excludes in dev space as well.
	// exclude "${mod_package}/generators".toString()
	exclude '*.DS_Store*'
}


dependencies {
	implementation "net.neoforged:neoforge:${neo_version}"
}

tasks.withType(ProcessResources).configureEach {
	var replaceProperties = [
			minecraft_version:	minecraft_version,
			minecraft_version_range: minecraft_version_range,
			neo_version: neo_version,
			neo_version_range: neo_version_range,
			loader_version_range: loader_version_range,
			mod_id: mod_id,
			mod_name: mod_name,
			mod_license: mod_license,
			mod_version: mod_version,
			mod_authors: mod_authors,
			mod_credits: mod_credits,
			mod_description: mod_description,
			pack_format_number: pack_format_number,
	]
	inputs.properties replaceProperties

	filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
		expand replaceProperties + [project: project]
	}
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
	publications {
		register('mavenJava', MavenPublication) {
			from components.java
		}
	}
	repositories {
		maven {
			url "file://${project.projectDir}/repo"
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}
